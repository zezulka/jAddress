package com.mycompany.jaddress;

import com.google.common.base.Preconditions;
import java.util.Arrays;

/**
 *
 * @author Miloslav Zezulka, 2017
 */
public final class AddressEntry implements Comparable<AddressEntry> {
    private static final String NOT_NULL = " cannot be null";
    public static final int NUM_REQ_ARGS = 6;
    private volatile int hashcode;
    
    /*REQUIRED*/
    private int id = 0;
    private String firstName;
    private String surname;
    private String address;
    private String email;
    /**
     * Must be in format: (+XXX )XXX XXX XXX
     */
    private String phone;

    /*OPTIONAL*/
    private String nationality;
    private String webpage;
    
    /**
     * Basic constructor, it does not set optional parameters (use setters instead)
     * @param firstName
     * @param surname
     * @param address
     * @param email
     * @param phone 
     * @param id
     * @throws NullPointerException if any of the parameters is null
     */
    public AddressEntry(int id, String firstName, String surname, String address, String email, String phone) {
        this.id = id;
        this.firstName = Preconditions.checkNotNull(firstName.trim(), "first name"+NOT_NULL);
        this.surname =   Preconditions.checkNotNull(surname.trim(), "surname"+NOT_NULL);
        this.address =   Preconditions.checkNotNull(address.trim(), "address"+NOT_NULL);
        Preconditions.checkArgument(checkEmailValid(email.trim()));
        Preconditions.checkArgument(checkPhoneValid(phone.trim()));
        this.email = email;
        this.phone = phone;
    }
    
    /**
     * Constructor, which has got address values as an array. This format is generated by
     * the opencsv library. Functionality same as the wordy constructor (provided the order in which
     * Strings are stored in the array is the same as in the wordy constructor!)
     * @param csvRow array of strings : {firstName, surname, address, email, phone}
     */
    public AddressEntry(String[] csvRow) {
        this(Integer.parseInt(csvRow[0]), csvRow[1], csvRow[2], csvRow[3], csvRow[4], csvRow[5]);
    }
    
    public String[] getAllVals() {
        return new String[]{String.valueOf(this.id), this.getFirstName(), this.getSurname(), this.getAddress(), 
                            this.getEmail(), this.getPhone(), this.getNationality(), this.getWebpage()};
    }
    
    private static boolean checkEmailValid(String email) {
        return email == null? false : email.matches("^([_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" 
                             + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,}))?$");
    }
    
    private static boolean checkPhoneValid(String phone) {
        return phone == null ? false : phone.matches("^((\\+[0-9]{3}\\s)?[0-9]{3}(\\s[0-9]{3}){2})?$");
    }
    

    public int getId() {
        return this.id;
    }
    
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getWebpage() {
        return webpage;
    }

    public void setWebpage(String webpage) {
        this.webpage = webpage;
    }

    public String getNationality() {
        return nationality;
    }

    public void setNationality(String nationality) {
        this.nationality = nationality;
    }
    
    @Override
    public String toString() {
        return Arrays.toString(this.getAllVals());
    }
    
    /**
     * This implementation does not take id attribute into consideration, because
     * the only object having the same id must be the object itself. Furthermore,
     * skipping id attribute prevents same address entries from being added, even though
     * they have different id (=different lines in csv files with same values)
     * @param obj
     * @return 
     */
    @Override
    public boolean equals(Object obj) {
        if(obj == this) { //ae.id == this.id!
            return true;
        }
        if(!(obj instanceof AddressEntry)) {
            return false;
        }
        
        AddressEntry ae = (AddressEntry) obj;
        return ae.address.equals(this.address) && ae.phone.equals(this.phone) &&
               ae.firstName.equals(this.firstName) && ae.surname.equals(this.surname) && 
               ae.email.equals(this.email);
    }

    @Override
    public int hashCode() {
        int hash = hashcode;
        if(hash == 0) {
            hash = 17;
            hash = 31 * hash + this.firstName.hashCode();
            hash = 31 * hash + this.surname.hashCode();
            hash = 31 * hash + this.address.hashCode();
            hash = 31 * hash + this.email.hashCode();
            hash = 31 * hash + this.phone.hashCode();
            hashcode = hash;
        }
        return hash;
    } 

    @Override
    public int compareTo(AddressEntry t) {
        return this.id - t.id;
    }
}
